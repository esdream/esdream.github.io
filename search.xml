<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dropout与过拟合]]></title>
    <url>%2F2018%2F03%2F30%2Fdropout-overfitting%2F</url>
    <content type="text"><![CDATA[Dropout方法简介Dropout方法是解决神经网络过拟合问题的一个行之有效的方法。其过程如下： 在训练中，随机删除网络中隐藏层一定比例（例如50%）的units（图b中变为×的units）； 在删除units后的网络中进行训练，并更新units参数； 恢复被删除的units，再重新随机选择相同比例的units，重复第2步。直至训练迭代次数为止。 在预测时，将删除的units全部恢复，不再需要Dropout。 为什么Dropout能起到解决overfitting的作用？ 平均以抵消过拟合：每一次迭代由于是随机删除units，相当于k次迭代训练了k个不同的神经网络，完整的Dropout过程相当于对于不同的Neural Network取平均或者投票（类似于集成学习中的Bagging），这样可以有效防止过拟合。 减少神经元之间复杂的共适应关系：由于Dropout导致神经元不一定每次都在dropout网络中出现，能够减少网络对任一feature的依赖，使权值更新不再依赖于某一隐含节点，能够从其他节点中学习到一些共同的模式，增强鲁棒性，达到类似L2正则化的效果。 References: Dropout in (Deep) Machine learning 深度学习–Dropout Dropout解决过拟合问题]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>Dropout</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Anaconda实现Python环境配置与管理]]></title>
    <url>%2F2018%2F03%2F19%2Fconda-env%2F</url>
    <content type="text"><![CDATA[前言Anaconda 提供了Python环境配置与管理的终极解决方案，使用Anaconda能够方便地对Python packages安装、管理、导入等。 使用方法列出环境在终端中输入以下命令。1conda env list 列表中当前所在环境旁边有一个星号。默认的环境名为root。 创建环境在终端中输入1conda create -n env_name package_names 其中package_names可以省略，如果省略则会配置为当前默认的Python版本。在创建环境时，可以指定要安装在环境中的Python版本。例如这里创建环境名为py3，并安装最新版本的Python 3.6。1conda create -n py3 python=3.6 需要安装Python 2时同理。 激活环境在Windows上：1activate env_name 在Linux/OSX上：1source activate env_name 退出环境在Windows上：1deactivate 在Linux/OSX上：1source deactivate 共享环境环境导出在终端中输入：1conda env export &gt; environment.yml 将环境导出为environment.yml文件。 对于不使用conda的用户，使用以下命令将环境导出：1pip free &gt; environment.txt 环境导入conda用户在终端输入：1conda env update -f=/path/to/envirionment.yml 则可以让环境直接导入至conda中。 非conda用户使用pip导入环境在终端输入：1pip install -r /path/requirements.txt 删除环境1conda env remove -n env_name]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>environment</tag>
        <tag>环境配置</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Anaconda3 / Python3环境下安装Opencv]]></title>
    <url>%2F2017%2F09%2F07%2Finstall-Opencv-in-Python3-Anaconda3%2F</url>
    <content type="text"><![CDATA[问题起源最近在做一个深度学习项目，期间需要进行人脸检测，想使用OpenCV2库。可曾想这个大坑货的官方版本只支持Python 2.x版本。而我的整个程序由于是在Anaconda3编写的，使用了大量Python3的语法与特性。而Google上大部分解决方法要么是要下载.whl文件，要么是需要下载源码重新编译，不符合我们优雅地解决问题的初衷。经过一番折腾，终于被我找到了最优雅的解决方式。 安装环境 操作系统: Windows 10 amd64 Python环境: Anaconda3 / Python3 解决过程首先说一下解决的过程，以后碰到类似的找不到合适安装包的问题可以参照解决，没耐心的可以直接跳到下一节 安装方法 。 我首先搜索了Anoconda的安装包库。1$ conda search cv 返回结果123456789101112131415161718192021222324cvxcanon 0.0.23.3 py27_0 defaults 0.0.23.3 py34_0 defaults 0.0.23.3 py35_0 defaults 0.0.23.3 py27_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free 0.0.23.3 py34_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free 0.0.23.3 py35_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/freecvxopt 1.1.9 py35_0 defaults 1.1.9 py35_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/freer-cvtools 0.3.2 r3.3.1_0 defaults 0.3.2 r3.3.2_0 defaults 0.3.2 r3.4.1_0 defaultsr-mgcv 1.8_12 r3.2.4_0 defaults 1.8_12 r3.3.0_0 defaults 1.8_12 r3.3.1_0 defaults 1.8_16 r3.3.2_0 defaults 1.8_17 r3.4.1_0 defaultsvcversioner 2.16.0.0 py27_0 defaults 2.16.0.0 py34_0 defaults 2.16.0.0 py35_0 defaults 2.16.0.0 py36_0 defaults 2.16.0.0 py27_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free 2.16.0.0 py34_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free 2.16.0.0 py35_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free 2.16.0.0 py36_0 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free 最左边一列是名字中包含cv的包，如果没有类似于opencv的包说明Anaconda中没有合适的库。 接下来搜索一下Python pip的安装包库。1$ pip search cv 找到返回结果中opencv相关的包。123456789101112131415simple-opencv-ocr (0.0) - A simple OCR with OpenCVopcvm-sdk-python (1.1.7) - OPCVM360 RESTFul API Wrapperopencv-utils (0.0.2) - OpenCV Utilitiesopencv-python (3.3.0.10) - Wrapper package for OpenCV python bindings. INSTALLED: 3.3.0.10 (latest)opencv_cffi (0.2.2) - A random subset of OpenCV's' functionality, wrapped via CFFIopencv_engine (1.0.1) - OpenCV imaging engine for thumbor.opencv_helpers (1.1) - Helper functions for opencvopencvutils (0.9.2) - Simple OpenCV 3.x image processing functionsOpenRCV (0.0.1-alpha) - open-source software for tallying ranked-choice voting electionsopenslides-topicvoting (1.1.0) - OpenSlides Topic Voting Plugin 左边一列是包名，右边一列是包的说明。我们发现好像有几个可能与OpenCV有关。可以一个一个尝试。我这里觉得opencv-python相关的可能性最大（程序员的直觉），就直接安装了。 安装方法猴子都会的安装方法。1$ pip install opencv-python 检验安装安装完成后，运行123$ python&gt;&gt;&gt; import cv2&gt;&gt;&gt; cv2.__version__ 如果没有出现异常，说明安装成功。 最后，感谢将openCV官方包封装成Python3支持的包并推送至pip的人。节约他人的时间，也是一种伟大。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python3</tag>
        <tag>OpenCV2</tag>
        <tag>Anaconda3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pyenv教程完整版]]></title>
    <url>%2F2017%2F05%2F25%2Fhow-to-install-pyenv%2F</url>
    <content type="text"><![CDATA[为什么要安装pyenv？Python最令人头疼的问题之一，就是其版本问题。我们经常会遇到系统需要的运行环境是Python 2.7，但自己又想使用Python 3.x中的某些特性。 这时候需要在系统中安装多个版本的Python。但不同版本的Python会相互影响，例如Shell的Python版本决定运行环境，Python 2和Python 3的pip会冲突等等。因此我们需要一个不会影响系统运行环境，而又可以轻松切换版本的Python管理器。pyenv就是一款比较优秀的Python版本管理器。 pyenv能做什么？pyenv能够实现： 可以自由切换全局Python版本 对每个项目提供不同的Python版本支持 重写环境变量中的Python版本 更轻便地创建Python虚拟环境 安装与配置pyenv安装pyenv可以通过Github或Pypi两种方式安装pyenv。 Github方式（推荐）1$ curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash 更新pyenv：1pyenv update Pypi方式使用Pypi方式安装时，一定要注意系统Python版本应为Python 2.x。1$ pip install --egg pyenv 定义环境变量使用CentOS或Debian系统时，在命令行输入：123$ echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bash_profile$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bash_profile$ echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bash_profile 使用Ubuntu或Fedora：将命令行中的.bash_profile改为~/.bashrc。特别地，如果使用zsh作为Shell环境：将命令行中的.bash_profile改为~/.zshenv。 重启Shell重启之后，环境变量的配置才会生效。1$ exec $SHELL 此时pyenv的安装已经完成，在命令行中输入1$ pyenv version 如果打印1system (set by /$HOME/.pyenv/version) 则表示安装成功。安装完pyenv还必须安装Python依赖包。 安装Python依赖包pyenv在安装不同版本的Python时需要编译Python，会依赖一些库文件。安装Python前必须安装这些库文件。不同系统安装方法如下： Ubuntu/Debian: 1$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev Fedora/CentOS/RHEL: 1$ yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel Mac OS X: 1brew install readline xz 此时所有安装和配置工作已经完成。安装存在Bug请参考https://github.com/pyenv/pyenv/wiki/Common-build-problems。 使用pyenv以下是pyenv常用的一些命令。 查看当前Python版本： 1$ pyenv version 查看pyenv中可以使用的Python版本： 1$ pyenv versions 查看所有可以安装的版本： 1$ pyenv install --list 安装Python版本： 1$ pyenv install &lt;Python版本&gt; 编译Python的时间比较长，请耐心等待。 卸载Python版本： 1$ pyenv uninstall &lt;Python版本&gt; 切换Shell的Python版本： 1$ pyenv shell &lt;Python版本&gt; 切换后，可以通过which python命令查看当前Shell的Python环境。 设置局部python版本: 1$ pyenv local &lt;python版本&gt; 卸载pyenv1$ rm -fr ~/.pyenv 然后从.bashrc/.zshrc/.bash_profile中移除下面的环境变量：123export PATH=&quot;~/.pyenv/bin:$PATH&quot;eval &quot;$(pyenv init -)&quot;eval &quot;$(pyenv virtualenv-init -)&quot; References: https://github.com/pyenv/pyenv. https://github.com/pyenv/pyenv/wiki/Common-build-problems.]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[详细解释均方差与方差]]></title>
    <url>%2F2017%2F05%2F11%2Fmean-square-error-and-variance%2F</url>
    <content type="text"><![CDATA[本文于2018年3月30日更新，从自由度上解释了MSE中N与N-1的区别。 在统计学和机器学习领域中，经常会使用到均方差和方差这两个词。那么它们有什么区别呢？ 定义均方差(Mean Square Error, MSE)的公式如下： $$MSE = {\sum_{i=0}^{n}(x_i - {\overline x})^2 \over n}$$ 方差(Variance)的公式如下： $$Var = {\sum_{i=0}^{n}(x_i - {\overline x})^2 \over n - 1}$$ 两者的共同点与区别事实上，二者都属于方差，也可以说是方差在不同情况下的两种表达方式。实际上二者并无区别。真正需要注意的是二者除以的样本数n与n-1。 在统计学中，存在 “自由度” 这一概念。自由度是指当以样本的统计量来估计总体的参数时，样本中独立或能自由变化的数据个数，称为该统计量的自由度。一般来说，自由度等于独立变量减掉其衍生量数；举例来说，对于n个随机且相互独立的样本，某一样本的样本值与其他样本的样本值没有任何关系，也就是说n个样本都会对均值$\overline x$产生影响，因此样本均值的自由度是n。 而在方差Var中，需要使用样本减平均值(一个由样本决定的衍伸量)。而在均值$\overline x$固定的情况下，n个随机样本中能够独立变化的样本值为n-1个，剩下的一个样本必然受其他n-1样本影响。因此对n个随机样本而言，其方差Var自由度为n-1。 在机器学习中，很多研究者不care自由度这一概念，因此MSE计算常用n。但从严格的统计学定义出发，应该使用n-1。 References: What is the difference between Mean Squared Deviation and Variance? 自由度(统计学))]]></content>
      <categories>
        <category>Math</category>
      </categories>
  </entry>
</search>
